delhaize <- function() {
list(t=14,
on_min=2,
on_max=6,
off_min=2,
off_max=4,
b=c(2,2,3,2,3,3,4))
}
delhaize()
delhaize$b
d = delhaize()
d$b
d$on_min
delhaize <- function() {
list(t=14,
on_min=2,
on_max=6,
off_min=2,
off_max=4,
b=c(2,2,
2,2,
3,3,
2,2,
2,3,
3,3,
4,3))
}
d = delhaize()
d$b
sample(1:10,1)
sample(1:10,1)
sample(1:10)
sample(1:10)
sample(1:10,1)
sample(1:10,2)
sample(1:10,2)
sample(1:10,2)
sample(1:2,3)
sample(1:2,3,replace=TRUE)
sample(1:10,replace=TRUE)
sample(1:10,replace=TRUE)
sample(1:10,replace=TRUE)
sample(1:10,replace=TRUE)
1:10
if(5==6) print("stuff")
if(6==6) print("stuff")
delhaize <- function() {
list(t=14,
on_min=2,
on_max=6,
off_min=2,
off_max=4,
b=c(2,2,
2,2,
3,3,
2,2,
2,3,
3,3,
4,3))
}
royal <- function() {
list(t=16,
on_min=3,
on_max=8,
off_min=3,
off_max=8,
b=c(10,10,15,15,
20,20,20,15,
15,15,20,20,
20,20,15,10))
}
delhaize_royal_spectrum <- function(t=NA,b_min=NA,b_max=A=NA) {
if(is.na(t)) t = sample(10:20)
if(is.na(b_min)) b_min = sample(1:20)
if(is.na(b_max)) b_max = sample(b_min:2*b_min)
list(t=sample(10:20,1),
on_min=sample(1:4,1),
on_max=sample(4:10,1),
off_min=sample(1:4,1),
off_max=sample(4:8,1),
b = sample(b_min:b_max,replace=TRUE))
}
delhaize_royal_spectrum <- function(t=NA,b_min=NA,b_max=A=NA) {
if(is.na(t)) t = sample(10:20);
if(is.na(b_min)) b_min = sample(1:20);
if(is.na(b_max)) b_max = sample(b_min:2*b_min);
list(t=sample(10:20,1),
on_min=sample(1:4,1),
on_max=sample(4:10,1),
off_min=sample(1:4,1),
off_max=sample(4:8,1),
b = sample(b_min:b_max,replace=TRUE))
}
delhaize_royal_spectrum <- function(t=NA,b_min=NA,b_max=A=NA) {
if(is.na(t)) { t = sample(10:20)}
if(is.na(b_min)) { b_min = sample(1:20)}
if(is.na(b_max)) {b_max = sample(b_min:2*b_min)}
list(t=sample(10:20,1),
on_min=sample(1:4,1),
on_max=sample(4:10,1),
off_min=sample(1:4,1),
off_max=sample(4:8,1),
b = sample(b_min:b_max,replace=TRUE))
}
delhaize_royal_spectrum <- function(t=NA,b_min=NA,b_max=NA) {
if(is.na(t)) { t = sample(10:20)}
if(is.na(b_min)) { b_min = sample(1:20)}
if(is.na(b_max)) {b_max = sample(b_min:2*b_min)}
list(t=sample(10:20,1),
on_min=sample(1:4,1),
on_max=sample(4:10,1),
off_min=sample(1:4,1),
off_max=sample(4:8,1),
b = sample(b_min:b_max,replace=TRUE))
}
delhaize_royal_spectrum <- function(t=NA,b_min=NA,b_max=NA) {
if(is.na(t)) t = sample(10:20)
if(is.na(b_min)) b_min = sample(1:20)
if(is.na(b_max)) b_max = sample(b_min:2*b_min)
list(t=sample(10:20,1),
on_min=sample(1:4,1),
on_max=sample(4:10,1),
off_min=sample(1:4,1),
off_max=sample(4:8,1),
b = sample(b_min:b_max,replace=TRUE))
}
test = delhaize_royal_spectrum()
delhaize_royal_spectrum <- function(t=NA,b_min=NA,b_max=NA) {
if(is.na(t)) t = sample(10:20)
if(is.na(b_min)) b_min = sample(1:20,1)
if(is.na(b_max)) b_max = sample(b_min:2*b_min,1)
list(t=sample(10:20,1),
on_min=sample(1:4,1),
on_max=sample(4:10,1),
off_min=sample(1:4,1),
off_max=sample(4:8,1),
b = sample(b_min:b_max,t,replace=TRUE))
}
test = delhaize_royal_spectrum()
test$b
test$t
delhaize_royal_spectrum <- function(t=NA,b_min=NA,b_max=NA) {
if(is.na(t)) t = sample(10:20)
if(is.na(b_min)) b_min = sample(1:20,1)
if(is.na(b_max)) b_max = sample(b_min:2*b_min,1)
list(t=t,
on_min=sample(1:4,1),
on_max=sample(4:10,1),
off_min=sample(1:4,1),
off_max=sample(4:8,1),
b = sample(b_min:b_max,t,replace=TRUE))
}
test = delhaize_royal_spectrum()
test$t
delhaize_royal_spectrum <- function(t=NA,b_min=NA,b_max=NA) {
if(is.na(t)) t = sample(10:20,1)
if(is.na(b_min)) b_min = sample(1:20,1)
if(is.na(b_max)) b_max = sample(b_min:2*b_min,1)
list(t=t,
on_min=sample(1:4,1),
on_max=sample(4:10,1),
off_min=sample(1:4,1),
off_max=sample(4:8,1),
b = sample(b_min:b_max,t,replace=TRUE))
}
test = delhaize_royal_spectrum()
test
sample(0:1,(5,5))
sample(0:25,(5,5))
?"matrix"
matrix(c(2,2,3,3),2,2)
matrix(sample(0:1,2*2)),2,2)
matrix(sample(0:1,2*2),2,2)
matrix(sample(0:1,2*2,replace=TRUE),2,2)
matrix(sample(0:1,2*2,replace=TRUE),2,2)
matrix(sample(0:1,2*2,replace=TRUE),2,2)
m = matrix(sample(0:1,25,replace=TRUE),5,5)
m
sum(m)
sum(m,1)
sum(m,2)
sum(m,(1,))
?sum
?apply
apply(m,sum)
apply(m,1,sum)
apply(m,2,sum)
b = apply(m,2,sum)
m
b
length(b)
size(b)
dim(b)
length(m)
length(m,1)
dim(m)
table(c(0,1,1,1,0))
table(cumsum(c(0,1,1,1,0)))
max(table(cumsum(c(0,1,1,1,0))))
max(table(cumsum(c(0,0,1,1,1,0,0,0))))
min(table(cumsum(c(0,0,1,1,1,0,0,0))))
cumsum(c(0,0,1,1,1,0,0,0))
x = c(0,0,1,1,1,0,0,0)
x[x]
x[[x]]
x(x)
x[x]
x[1:2]
x[1:4]
x[x==1]
min(table(cumsum(c(0,0,1,1,1,0,0,0))[x=FALSE]))
min(table(cumsum(c(0,0,1,1,1,0,0,0))[x==FALSE]))
max(table(cumsum(c(0,0,1,1,1,0,0,0))[x==FALSE]))
table(cumsum(c(0,0,1,1,1,0,0,0))[x==FALSE])
x
1-x
if(is.na(rows)) rows = sample(10:20,1)
if(is.na(cols)) cols = sample(10:20,1)
m = matrix(sample(0:1,rows*cols,replace=TRUE),rows,cols)
rows = NA
cols = NA
if(is.na(rows)) rows = sample(10:20,1)
if(is.na(cols)) cols = sample(10:20,1)
m = matrix(sample(0:1,rows*cols,replace=TRUE),rows,cols)
m
test = function(x) x+1
test(5)
random_binary_matrix <- function(rows=NA,cols=NA) {
if(is.na(rows)) rows = sample(10:20,1)
if(is.na(cols)) cols = sample(10:20,1)
m = matrix(sample(0:1,rows*cols,replace=TRUE),rows,cols)
b = apply(m,2,sum)
t = length(b)
on_min = min(apply(m,1,function(x) find_oomm(x,1,min)))
on_max = max(apply(m,1,function(x) find_oomm(x,1,max)))
off_min = min(apply(m,1,function(x) find_oomm(x,0,min)))
off_max = max(apply(m,1,function(x) find_oomm(x,0,max)))
list(t=t,
on_min=on_min,
on_max=on_max,
off_min=off_min,
off_max=off_max,
b=b)
}
test = random_binary_matrix()
find_oomm <- function(x,find=0,filter) {
if(find != 0) x = 1-x
filter(table(cumsum(x)[x==0]))
}
test = random_binary_matrix()
test
random_binary_matrix <- function(rows=NA,cols=NA) {
if(is.na(rows)) rows = sample(10:20,1)
if(is.na(cols)) cols = sample(10:20,1)
m = matrix(sample(c(FALSE,TRUE),rows*cols,replace=TRUE),rows,cols)
b = apply(m,2,sum)
t = length(b)
on_min = min(apply(m,1,function(x) find_oomm(x,1,min)))
on_max = max(apply(m,1,function(x) find_oomm(x,1,max)))
off_min = min(apply(m,1,function(x) find_oomm(x,0,min)))
off_max = max(apply(m,1,function(x) find_oomm(x,0,max)))
list(t=t,
on_min=on_min,
on_max=on_max,
off_min=off_min,
off_max=off_max,
b=b)
}
find_oomm <- function(x,bool,filter) {
if(!bool) x = !x
filter(table(cumsum(x)[!x]))
}
test = random_binary_matrix()
test
random_binary_matrix <- function(rows=NA,cols=NA) {
if(is.na(rows)) rows = sample(10:20,1)
if(is.na(cols)) cols = sample(10:20,1)
m = matrix(sample(c(FALSE,TRUE),rows*cols,replace=TRUE),rows,cols)
b = apply(m,2,sum)
t = length(b)
on_min = min(apply(m,1,function(x) find_oomm(x,TRUE,min)))
on_max = max(apply(m,1,function(x) find_oomm(x,TRUE,max)))
off_min = min(apply(m,1,function(x) find_oomm(x,FALSE,min)))
off_max = max(apply(m,1,function(x) find_oomm(x,FALSE,max)))
list(t=t,
on_min=on_min,
on_max=on_max,
off_min=off_min,
off_max=off_max,
b=b)
}
find_oomm <- function(x,bool,filter) {
if(!bool) x = !x
filter(table(cumsum(x)[!x]))
}
test = random_binary_matrix()
test
random_binary_matrix()
?rep
rep(5)
rep(5,5)
sample(c(TRUE,FALSE)
)
sample(c(TRUE,FALSE),1)
sample(c(TRUE,FALSE),1)
sample(c(TRUE,FALSE),1)
rep(TRUE,5)
convert_to_cyclic_problem <- function(gdodosp) {
assignment = c()
on = sample(c(TRUE,FALSE),1)
while(length(assignment) < gdodosp$t) {
if(on){
lower = gdodosp$on_min
upper = gdodosp$on_max
} else {
lower = gdodosp$off_min
upper = gdodosp$off_max
}
assignment = c(assignment, rep(oo,sample(lower,upper),1))
on = !on
}
list(b = gdodosp$b,
assignment = assignment[1:gdodosp$t])
}
convert_to_cyclic_problem(delhaize())
convert_to_cyclic_problem <- function(gdodosp) {
assignment = c()
on = sample(c(TRUE,FALSE),1)
while(length(assignment) < gdodosp$t) {
if(on){
lower = gdodosp$on_min
upper = gdodosp$on_max
} else {
lower = gdodosp$off_min
upper = gdodosp$off_max
}
assignment = c(assignment, rep(on,sample(lower,upper),1))
on = !on
}
list(b = gdodosp$b,
assignment = assignment[1:gdodosp$t])
}
convert_to_cyclic_problem(delhaize())
convert_to_cyclic_problem <- function(gdodosp) {
assignment = c()
on = sample(c(TRUE,FALSE),1)
while(length(assignment) < gdodosp$t) {
if(on){
lower = gdodosp$on_min
upper = gdodosp$on_max
} else {
lower = gdodosp$off_min
upper = gdodosp$off_max
}
assignment = c(assignment, rep(on,sample(lower,upper,1)))
on = !on
}
list(b = gdodosp$b,
assignment = assignment[1:gdodosp$t])
}
convert_to_cyclic_problem(delhaize())
convert_to_cyclic_problem <- function(gdodosp) {
assignment = c()
on = sample(c(TRUE,FALSE),1)
while(length(assignment) < gdodosp$t) {
if(on){
lower = gdodosp$on_min
upper = gdodosp$on_max
} else {
lower = gdodosp$off_min
upper = gdodosp$off_max
}
assignment = c(assignment, rep(on,sample(lower:upper,1)))
on = !on
}
list(b = gdodosp$b,
assignment = assignment[1:gdodosp$t])
}
convert_to_cyclic_problem(delhaize())
?pnorm
r=0.02
S=50
sigma=0.2
T=1
S=55
